// <auto-generated />
using System;
using CDataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DescribedDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DescribedDrugsId");

                    b.HasIndex("DescribedDrugsId");

                    b.ToTable("AppointmentDetailsDrug", (string)null);
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiagnosedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DiagnosedIssuesId");

                    b.HasIndex("DiagnosedIssuesId");

                    b.ToTable("AppointmentDetailsIssue", (string)null);
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("Id");

                    b.HasIndex("DId");

                    b.HasIndex("PId");

                    b.ToTable("AppointmentDetails", (string)null);
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid>("LicenseId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TakingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9f0310e-f347-44d0-a0ec-03f71b223d5b"),
                            Name = "Ibuprofen",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("c69906aa-99d0-4a91-b97a-f61198574a58"),
                            Name = "Paracetamol",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("de0735b8-332e-4ea8-84e4-c1d410936793"),
                            Name = "Amoxicillin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("9299a0a8-ff92-40c2-9920-bcc9b426f52d"),
                            Name = "Azithromycin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("46460250-561a-4ea6-b3f7-c77a5625ea0c"),
                            Name = "Prednisone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("cde84cf7-b42a-45f7-b932-b2a4395a1aeb"),
                            Name = "Ventolin",
                            TakingMethod = 2
                        },
                        new
                        {
                            Id = new Guid("83acde43-7879-4525-b3fe-b988b2ce8905"),
                            Name = "Epinephrine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("fb372f61-2200-4cbe-9601-43a4699c05e7"),
                            Name = "Lidocaine",
                            TakingMethod = 3
                        },
                        new
                        {
                            Id = new Guid("5bbdca04-b0bb-44da-8864-ae6eeec04be0"),
                            Name = "Morphine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("458f137e-b05c-4197-ab72-962ab36f8b2c"),
                            Name = "Ativan",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("36e892c0-e6b0-4517-92cb-ef8b23949909"),
                            Name = "Prozac",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("6a22b0a4-fe12-4430-b801-ba2082e8f712"),
                            Name = "Zoloft",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("03ffe4ca-b451-44b7-a3ee-9a51ff553bea"),
                            Name = "Xanax",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("62e6e201-d6e1-4f9c-98aa-32b5c6f1a6f3"),
                            Name = "Lorazepam",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("dc6dcd8e-05ec-4836-87c5-0d0bc76cfbc5"),
                            Name = "Valium",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("398f4a0c-aa09-4d6e-a9df-f932b3cba065"),
                            Name = "Codeine",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("7e3bf0b3-575a-42d4-9ba4-05cc3cfbedb9"),
                            Name = "Methadone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("75ea28f5-1a51-49c5-a7f8-6a309afd7d30"),
                            Name = "Oxycodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("c8d1f136-7b4b-47a2-9745-a4c885018329"),
                            Name = "Hydrocodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("e24980ae-a132-46b5-8681-44b76e5899d2"),
                            Name = "Fentanyl",
                            TakingMethod = 1
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b40beb0-9edf-48a5-9a0c-fe3196689e98"),
                            Name = "Headache"
                        },
                        new
                        {
                            Id = new Guid("81ee61b7-bcc7-4eec-8723-be5f2451a4bb"),
                            Name = "Fever"
                        },
                        new
                        {
                            Id = new Guid("b7c175a9-dd9e-4635-98d3-c3952f86ee0c"),
                            Name = "Cough"
                        },
                        new
                        {
                            Id = new Guid("9285a233-9584-4177-8b67-2c60c1a019ea"),
                            Name = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("46440fd9-628a-4d61-bd96-469e1e81b407"),
                            Name = "Back pain"
                        },
                        new
                        {
                            Id = new Guid("e3466e8d-3113-4b2e-9c9c-8b905c9299a0"),
                            Name = "Joint pain"
                        },
                        new
                        {
                            Id = new Guid("e6b0ef7d-124b-4846-9fa0-85b66387fed3"),
                            Name = "Allergies"
                        },
                        new
                        {
                            Id = new Guid("a3b1f31f-f3b1-44da-82f8-8d67ff015eed"),
                            Name = "High blood pressure"
                        },
                        new
                        {
                            Id = new Guid("db7946c8-0afb-4a88-9730-5662a615f0da"),
                            Name = "Depression"
                        },
                        new
                        {
                            Id = new Guid("f80544c0-59b2-4fa3-9960-10f880b1e096"),
                            Name = "Anxiety"
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("licenses", (string)null);
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.National", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("nationalIds", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "29708170100000"
                        },
                        new
                        {
                            Id = "29708170100001"
                        },
                        new
                        {
                            Id = "29708170100002"
                        },
                        new
                        {
                            Id = "29708170100003"
                        },
                        new
                        {
                            Id = "29708170100004"
                        },
                        new
                        {
                            Id = "29708170100005"
                        },
                        new
                        {
                            Id = "29708170100006"
                        },
                        new
                        {
                            Id = "29708170100007"
                        },
                        new
                        {
                            Id = "29708170100008"
                        },
                        new
                        {
                            Id = "29708170100009"
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DrugId")
                        .HasName("PK_PatientDrugs");

                    b.HasIndex("DrugId");

                    b.ToTable("PatientsDrugs", (string)null);
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.Property<Guid>("ConflictedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConflictingDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConflictedIssuesId", "ConflictingDrugsId");

                    b.HasIndex("ConflictingDrugsId");

                    b.ToTable("Conflicts", (string)null);
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.Property<Guid>("TreatedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TreatedIssuesId", "TreatmentDrugsId");

                    b.HasIndex("TreatmentDrugsId");

                    b.ToTable("IssuesTreatment", (string)null);
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.Property<Guid>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IssuesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IssuePatient", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("DescribedDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("DiagnosedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.License", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.License", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.National", "National")
                        .WithMany()
                        .HasForeignKey("NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("National");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.National", "National")
                        .WithMany()
                        .HasForeignKey("NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("National");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Drug", "Drug")
                        .WithMany("Patients")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Drugs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("ConflictedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("ConflictingDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("TreatedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("TreatmentDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
