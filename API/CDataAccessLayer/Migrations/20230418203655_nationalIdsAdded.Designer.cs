// <auto-generated />
using System;
using CDataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230418203655_nationalIdsAdded")]
    partial class nationalIdsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DescribedDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DescribedDrugsId");

                    b.HasIndex("DescribedDrugsId");

                    b.ToTable("AppointmentDetailsDrug");
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiagnosedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DiagnosedIssuesId");

                    b.HasIndex("DiagnosedIssuesId");

                    b.ToTable("AppointmentDetailsIssue");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("Id");

                    b.HasIndex("DId");

                    b.HasIndex("PId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid>("LicenseId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TakingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b73dddfe-d248-4340-97d2-4aaabe14ed23"),
                            Name = "Ibuprofen",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("fb6928f6-8e06-49b3-9df8-c76739559474"),
                            Name = "Paracetamol",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("bf8be46d-f777-4d38-b6e4-e5fe5c38f252"),
                            Name = "Amoxicillin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("68a96702-07a6-453b-964b-9e31388ac43a"),
                            Name = "Azithromycin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("b9d63277-f8dd-4973-8b0b-17452087e12a"),
                            Name = "Prednisone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("3b4058f4-ba5a-4208-afe1-a937fe451d77"),
                            Name = "Ventolin",
                            TakingMethod = 2
                        },
                        new
                        {
                            Id = new Guid("232d52b9-8eb1-4a9c-a787-0b702fdef19f"),
                            Name = "Epinephrine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("89d2e4d7-2e89-4ccf-aa45-6c943a544cd5"),
                            Name = "Lidocaine",
                            TakingMethod = 3
                        },
                        new
                        {
                            Id = new Guid("583428b1-338b-4a4b-a909-58a9472465bf"),
                            Name = "Morphine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("e07121fe-3346-4af5-a13c-dce14e5bd14e"),
                            Name = "Ativan",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("f3772df6-2551-4b90-96a8-c5e77d5c8e63"),
                            Name = "Prozac",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("d46a6e9f-d87d-482d-860a-e19717e5653f"),
                            Name = "Zoloft",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("59d50b39-0ccf-4feb-932c-b40e0d4db222"),
                            Name = "Xanax",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("8daa6c1d-44ed-4161-9f65-451e371b0f2d"),
                            Name = "Lorazepam",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("1b1766bb-286f-465e-b555-ee723791f03c"),
                            Name = "Valium",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("559a33d9-5780-455c-be6c-0396ad3df1ca"),
                            Name = "Codeine",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("f494ae16-b1e7-4cd7-b1f3-b69e867403f1"),
                            Name = "Methadone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("7300fcf0-081f-4c74-9cee-bcf46966f70c"),
                            Name = "Oxycodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("9e72682f-1b1f-4c43-ae77-b63f6f49bb93"),
                            Name = "Hydrocodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("7e3e2107-2224-4895-923c-f2efb79d8faa"),
                            Name = "Fentanyl",
                            TakingMethod = 1
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("637b2123-5277-4729-8c01-85784ce1fa7e"),
                            Name = "Headache"
                        },
                        new
                        {
                            Id = new Guid("e98e87ec-51f3-4ace-9d54-4e687f042fd4"),
                            Name = "Fever"
                        },
                        new
                        {
                            Id = new Guid("607ed07d-15a7-47a2-afd5-8af0be905f40"),
                            Name = "Cough"
                        },
                        new
                        {
                            Id = new Guid("1d7687ef-405a-4e03-a646-28157ca668f8"),
                            Name = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("cd8455bf-c154-41ab-a3c3-dc3a11c9183a"),
                            Name = "Back pain"
                        },
                        new
                        {
                            Id = new Guid("2325083e-ce14-4cef-abe4-1ada8f03892a"),
                            Name = "Joint pain"
                        },
                        new
                        {
                            Id = new Guid("3fab4b96-2d79-4899-9f3a-e26e6cd0875a"),
                            Name = "Allergies"
                        },
                        new
                        {
                            Id = new Guid("028703c6-06dd-472a-8cec-a71a8ee6fbf5"),
                            Name = "High blood pressure"
                        },
                        new
                        {
                            Id = new Guid("a8d40922-5a9d-4494-8e46-2a2f8a7f5da1"),
                            Name = "Depression"
                        },
                        new
                        {
                            Id = new Guid("1686db70-fd65-4895-ba1b-c2a285e6cf7d"),
                            Name = "Anxiety"
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("licenses");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.National", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("nationalIds");

                    b.HasData(
                        new
                        {
                            Id = "29708170100000"
                        },
                        new
                        {
                            Id = "29708170100001"
                        },
                        new
                        {
                            Id = "29708170100002"
                        },
                        new
                        {
                            Id = "29708170100003"
                        },
                        new
                        {
                            Id = "29708170100004"
                        },
                        new
                        {
                            Id = "29708170100005"
                        },
                        new
                        {
                            Id = "29708170100006"
                        },
                        new
                        {
                            Id = "29708170100007"
                        },
                        new
                        {
                            Id = "29708170100008"
                        },
                        new
                        {
                            Id = "29708170100009"
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DrugId")
                        .HasName("PK_PatientDrugs");

                    b.HasIndex("DrugId");

                    b.ToTable("PatientsDrugs");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.Property<Guid>("ConflictedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConflictingDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConflictedIssuesId", "ConflictingDrugsId");

                    b.HasIndex("ConflictingDrugsId");

                    b.ToTable("Conflicts", (string)null);
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.Property<Guid>("TreatedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TreatedIssuesId", "TreatmentDrugsId");

                    b.HasIndex("TreatmentDrugsId");

                    b.ToTable("IssuesTreatment", (string)null);
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.Property<Guid>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IssuesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IssuePatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("DescribedDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("DiagnosedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.License", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.License", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.National", "National")
                        .WithMany()
                        .HasForeignKey("NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("National");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.National", "National")
                        .WithMany()
                        .HasForeignKey("NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("National");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Drug", "Drug")
                        .WithMany("Patients")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Drugs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("ConflictedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("ConflictingDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("TreatedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("TreatmentDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
