// <auto-generated />
using System;
using CDataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230417145313_dataaa12")]
    partial class dataaa12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DescribedDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DescribedDrugsId");

                    b.HasIndex("DescribedDrugsId");

                    b.ToTable("AppointmentDetailsDrug");
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiagnosedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DiagnosedIssuesId");

                    b.HasIndex("DiagnosedIssuesId");

                    b.ToTable("AppointmentDetailsIssue");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("Id");

                    b.HasIndex("DId");

                    b.HasIndex("PId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TakingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92ecdbbf-2dff-47df-943d-eca7b7e04650"),
                            Name = "Ibuprofen",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("88e717ba-b830-4387-a819-49cb6bdbfe18"),
                            Name = "Paracetamol",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("4742bb67-ac9b-4388-b362-ded34a29b9d9"),
                            Name = "Amoxicillin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("ab98ad8d-9b2f-4d96-95e7-d547ddc5bba4"),
                            Name = "Azithromycin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("d8d21467-5f37-4813-8048-44fe1d66909e"),
                            Name = "Prednisone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("e83c6072-c300-481e-9f6c-1818deb2f8d7"),
                            Name = "Ventolin",
                            TakingMethod = 2
                        },
                        new
                        {
                            Id = new Guid("d0ab5e61-888b-465f-8c47-99f99e269267"),
                            Name = "Epinephrine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("d8d04ce0-0185-4c7d-ae5c-33e586544cc5"),
                            Name = "Lidocaine",
                            TakingMethod = 3
                        },
                        new
                        {
                            Id = new Guid("79e5201e-edd5-4b40-af46-a7175a4eb2be"),
                            Name = "Morphine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("5504f30f-55b7-44c2-a359-c87c72c0f1b8"),
                            Name = "Ativan",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("1f4882a5-ac92-4c94-9c01-25ee217cacb0"),
                            Name = "Prozac",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("3443370c-0be1-457f-b0fa-8248251a998c"),
                            Name = "Zoloft",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("6e07ef01-1b0a-43a5-9ba3-3f1f820b6efc"),
                            Name = "Xanax",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("6324fff9-5f4a-428f-8c10-fb9550b8e1e2"),
                            Name = "Lorazepam",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("6939b44e-c0e8-4bec-9b06-d437ffdca84d"),
                            Name = "Valium",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("571b1163-7e0b-475d-8768-56c9e1d1cb86"),
                            Name = "Codeine",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("3f521eac-a5a0-47c5-b675-fd4bb7873d5e"),
                            Name = "Methadone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("e38e6f0b-7121-44cf-957e-e45b23e1e6be"),
                            Name = "Oxycodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("a4da5c7b-a10f-418e-820a-e1b3be1138e8"),
                            Name = "Hydrocodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("ef878ca5-aa60-4e0b-a351-b5b4b4f21426"),
                            Name = "Fentanyl",
                            TakingMethod = 1
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b7a52a4-2545-4d65-b1f8-e58c57a89887"),
                            Name = "Headache"
                        },
                        new
                        {
                            Id = new Guid("de6abefc-91e5-47a2-8ab7-5a5b547dc5b6"),
                            Name = "Fever"
                        },
                        new
                        {
                            Id = new Guid("0fcb08f9-96c0-4ee6-a14c-939fd381f05f"),
                            Name = "Cough"
                        },
                        new
                        {
                            Id = new Guid("ce3e5b37-12a6-426b-8a62-7135b80387e1"),
                            Name = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("cf1b937f-dc1b-47cc-a54b-79d80777b46b"),
                            Name = "Back pain"
                        },
                        new
                        {
                            Id = new Guid("62583bae-5a6a-434e-a365-385fffc51bf8"),
                            Name = "Joint pain"
                        },
                        new
                        {
                            Id = new Guid("36725b58-5509-4986-a2e4-9d2bc286a51c"),
                            Name = "Allergies"
                        },
                        new
                        {
                            Id = new Guid("287e6050-6a07-4353-a4b5-9d0916cc4cb6"),
                            Name = "High blood pressure"
                        },
                        new
                        {
                            Id = new Guid("2080478c-05ef-41eb-b3b1-935883523343"),
                            Name = "Depression"
                        },
                        new
                        {
                            Id = new Guid("4bb9daab-48bf-49ad-95ae-58686db15ec3"),
                            Name = "Anxiety"
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DrugId")
                        .HasName("PK_PatientDrugs");

                    b.HasIndex("DrugId");

                    b.ToTable("PatientsDrugs");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.Property<Guid>("ConflictedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConflictingDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConflictedIssuesId", "ConflictingDrugsId");

                    b.HasIndex("ConflictingDrugsId");

                    b.ToTable("Conflicts", (string)null);
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.Property<Guid>("TreatedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TreatedIssuesId", "TreatmentDrugsId");

                    b.HasIndex("TreatmentDrugsId");

                    b.ToTable("IssuesTreatment", (string)null);
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.Property<Guid>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IssuesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IssuePatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("DescribedDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("DiagnosedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DId");

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Drug", "Drug")
                        .WithMany("Patients")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Drugs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("ConflictedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("ConflictingDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("TreatedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("TreatmentDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
