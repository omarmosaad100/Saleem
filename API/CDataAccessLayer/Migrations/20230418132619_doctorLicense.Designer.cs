// <auto-generated />
using System;
using CDataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CDataAccessLayer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230418132619_doctorLicense")]
    partial class doctorLicense
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DescribedDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DescribedDrugsId");

                    b.HasIndex("DescribedDrugsId");

                    b.ToTable("AppointmentDetailsDrug");
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DiagnosedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentsId", "DiagnosedIssuesId");

                    b.HasIndex("DiagnosedIssuesId");

                    b.ToTable("AppointmentDetailsIssue");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("Id");

                    b.HasIndex("DId");

                    b.HasIndex("PId");

                    b.ToTable("AppointmentDetails");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<Guid>("licenseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("licenseId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TakingMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27c98bce-526d-49b4-a98c-ae0ca28b20b1"),
                            Name = "Ibuprofen",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("98ddbf8f-3cd8-47b2-bf0d-bdc52bd8681f"),
                            Name = "Paracetamol",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("d80e5728-78d8-44cd-a775-1f5ff6c85b88"),
                            Name = "Amoxicillin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("726d694d-8df0-4bc2-9b6e-6fb4f73701be"),
                            Name = "Azithromycin",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("15a28081-719d-4bb8-96f6-1bad823028da"),
                            Name = "Prednisone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("544ec3f8-1ab5-47b8-835d-97cbf03570ea"),
                            Name = "Ventolin",
                            TakingMethod = 2
                        },
                        new
                        {
                            Id = new Guid("eadebb6a-982a-4817-9818-cd043b1543c1"),
                            Name = "Epinephrine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("13f498fd-aebe-4a50-b729-7ec3096d924d"),
                            Name = "Lidocaine",
                            TakingMethod = 3
                        },
                        new
                        {
                            Id = new Guid("ac377035-f7fa-459d-bd95-360f45a7639d"),
                            Name = "Morphine",
                            TakingMethod = 1
                        },
                        new
                        {
                            Id = new Guid("6474031b-cc79-43ac-9b92-2c252772bf6d"),
                            Name = "Ativan",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("f7384680-ec0d-4d6d-8471-bb9250763fb4"),
                            Name = "Prozac",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("f6faecea-3d1a-471c-8dc5-70d94fa53eec"),
                            Name = "Zoloft",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("745a6580-3c31-4121-97cc-ef8e0183eee9"),
                            Name = "Xanax",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("c6248587-e6d1-48f5-b835-9ffe3eed0382"),
                            Name = "Lorazepam",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("94f73468-1368-486b-bea3-694112753eb3"),
                            Name = "Valium",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("f81c16ff-0463-4992-bc5f-6686048f7c6f"),
                            Name = "Codeine",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("74940f0e-54f4-4086-8c4e-d163428aae9b"),
                            Name = "Methadone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("83fe7f96-c49b-4921-8600-723a042dea8a"),
                            Name = "Oxycodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("96a256ed-1bf6-4c67-93ab-62535eaca0a2"),
                            Name = "Hydrocodone",
                            TakingMethod = 0
                        },
                        new
                        {
                            Id = new Guid("d077d5a3-5685-408d-a7ca-946c6a21619d"),
                            Name = "Fentanyl",
                            TakingMethod = 1
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Issue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d78470e2-56f2-4ebe-9320-6831f39b20df"),
                            Name = "Headache"
                        },
                        new
                        {
                            Id = new Guid("5345c7c3-0d92-483b-8b8b-fdd0a39d0621"),
                            Name = "Fever"
                        },
                        new
                        {
                            Id = new Guid("5bd046d7-468c-4887-a292-70e98c8c7f0b"),
                            Name = "Cough"
                        },
                        new
                        {
                            Id = new Guid("3b5289fc-9a75-4544-be84-a46f5d2a52d3"),
                            Name = "Sore throat"
                        },
                        new
                        {
                            Id = new Guid("5a218cc5-c5f8-4b29-b9f5-baaa054e33cc"),
                            Name = "Back pain"
                        },
                        new
                        {
                            Id = new Guid("02d2c0d4-7213-4acf-a991-32e16d622a4f"),
                            Name = "Joint pain"
                        },
                        new
                        {
                            Id = new Guid("815461b7-971c-4b95-8dde-9abb7484ae66"),
                            Name = "Allergies"
                        },
                        new
                        {
                            Id = new Guid("2c0476c8-148a-4873-8625-e0b33b1415d9"),
                            Name = "High blood pressure"
                        },
                        new
                        {
                            Id = new Guid("642d4422-d3f8-4a68-9d17-2b0cad981743"),
                            Name = "Depression"
                        },
                        new
                        {
                            Id = new Guid("55ef0d78-1a9e-4cdb-8e51-19ab25f69672"),
                            Name = "Anxiety"
                        });
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.License", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NationalIdId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NationalIdId");

                    b.ToTable("licenses");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.NationalId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("nationalIds");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimesPerDay")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DrugId")
                        .HasName("PK_PatientDrugs");

                    b.HasIndex("DrugId");

                    b.ToTable("PatientsDrugs");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.Property<Guid>("ConflictedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConflictingDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConflictedIssuesId", "ConflictingDrugsId");

                    b.HasIndex("ConflictingDrugsId");

                    b.ToTable("Conflicts", (string)null);
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.Property<Guid>("TreatedIssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TreatmentDrugsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TreatedIssuesId", "TreatmentDrugsId");

                    b.HasIndex("TreatmentDrugsId");

                    b.ToTable("IssuesTreatment", (string)null);
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.Property<Guid>("IssuesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IssuesId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("IssuePatient");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppointmentDetailsDrug", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("DescribedDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentDetailsIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.AppointmentDetails", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("DiagnosedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.AppointmentDetails", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.License", "license")
                        .WithMany()
                        .HasForeignKey("licenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("license");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.License", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.NationalId", "NationalId")
                        .WithMany()
                        .HasForeignKey("NationalIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NationalId");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.PatientsDrugs", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Drug", "Drug")
                        .WithMany("Patients")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", "Patient")
                        .WithMany("Drugs")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DrugIssue", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("ConflictedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("ConflictingDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugIssue1", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("TreatedIssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Drug", null)
                        .WithMany()
                        .HasForeignKey("TreatmentDrugsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IssuePatient", b =>
                {
                    b.HasOne("CDataAccessLayer.Data.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CDataAccessLayer.Data.Models.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Drug", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("CDataAccessLayer.Data.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Drugs");
                });
#pragma warning restore 612, 618
        }
    }
}
